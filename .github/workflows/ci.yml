name: Isotope CI/CD Pipeline

# Define when the workflow should run
on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

# Set environment variables
env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  check-lockfile:
    name: Check Lockfile
    runs-on: ubuntu-latest
    outputs:
      should-commit: ${{ steps.check.outputs.should-commit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: Check if lockfile exists and is valid
        id: check
        run: |
          if [ ! -f "pnpm-lock.yaml" ] || ! pnpm install --frozen-lockfile &>/dev/null; then
            echo "Lockfile missing or invalid. Will generate a new one."
            pnpm install --no-frozen-lockfile
            echo "should-commit=true" >> $GITHUB_OUTPUT
          else
            echo "Lockfile is valid."
            echo "should-commit=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload lockfile
        uses: actions/upload-artifact@v4
        with:
          name: pnpm-lock
          path: pnpm-lock.yaml
          retention-days: 1
  
  validate:
    name: Validate
    needs: check-lockfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: Download lockfile
        uses: actions/download-artifact@v4
        with:
          name: pnpm-lock
          path: .
      
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Lint code
        run: pnpm run lint
        
      - name: Type check
        run: pnpm run typecheck

  test:
    name: Test
    needs: [check-lockfile, validate]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: Download lockfile
        uses: actions/download-artifact@v3
        with:
          name: pnpm-lock
          path: .
      
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run unit and integration tests
        run: pnpm run test
      
# Test coverage job commented out until coverage reporting setup is ready
# Uncomment and configure when ready to set up coverage
      # - name: Upload test coverage
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test-coverage
      #     path: coverage/
      #     retention-days: 7

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    # Only run E2E tests on develop and main branches, not on PRs for speed
    if: github.event_name == 'push'
    needs: [check-lockfile, validate]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: Download lockfile
        uses: actions/download-artifact@v3
        with:
          name: pnpm-lock
          path: .
      
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run Cypress tests
        uses: cypress-io/github-action@v5
        with:
          build: pnpm run build
          start: pnpm run preview
          wait-on: 'http://localhost:4173'

  build:
    name: Build
    needs: [check-lockfile, validate, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: Download lockfile
        uses: actions/download-artifact@v3
        with:
          name: pnpm-lock
          path: .
      
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build project
        run: pnpm run build
      
      - name: Analyze bundle size
        run: npx vite-bundle-analyzer || echo "Bundle analyzer not configured, skipping"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: dist/
          retention-days: 7
  
# Deployment jobs commented out until Vercel setup is ready
# Uncomment and configure when ready to set up deployments

#  deploy-preview:
#    name: Deploy Preview (Develop)
#    if: github.ref == 'refs/heads/develop'
#    needs: [build]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#      
#      - name: Download build artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: build-output
#          path: dist
#      
#      - name: Deploy to Vercel (Preview)
#        uses: amondnet/vercel-action@v25
#        with:
#          vercel-token: ${{ secrets.VERCEL_TOKEN }}
#          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
#          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          vercel-args: '--prod'
#          alias-domains: |
#            isotope-dev.yourdomain.com

#  deploy-production:
#    name: Deploy Production
#    if: github.ref == 'refs/heads/main'
#    needs: [build, e2e]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#      
#      - name: Download build artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: build-output
#          path: dist
#      
#      - name: Deploy to Vercel (Production)
#        uses: amondnet/vercel-action@v25
#        with:
#          vercel-token: ${{ secrets.VERCEL_TOKEN }}
#          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
#          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          vercel-args: '--prod'